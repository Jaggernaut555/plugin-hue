{"version":3,"sources":["../node_modules/eventemitter3/index.js","../node_modules/midi-mixer-plugin/lib/Assignment.js","../node_modules/midi-mixer-plugin/lib/ButtonType.js","../node_modules/midi-mixer-plugin/lib/index.js","api.ts","index.ts"],"names":[],"mappings":"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","file":"src.8d44fbea.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Assignment = void 0;\r\n// public\r\nvar eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\r\n// local\r\nvar _1 = require(\"./\");\r\n/**\r\n * An Assignment represents a single plugin-scoped entry in the MIDI Mixer\r\n * assignments list. This assignment can send events to MIDI Mixer as well as\r\n * react to hardware input coming from the board.\r\n *\r\n * ```\r\n * const foo = new Assignment(\"foo\", {\r\n *   name: \"Foo Entry\",\r\n * });\r\n *\r\n * foo.volume = 0.5;\r\n * foo.muted = true;\r\n * ```\r\n */\r\nvar Assignment = /** @class */ (function (_super) {\r\n    __extends(Assignment, _super);\r\n    /**\r\n     * @param id A unique ID for this assignment within this plugin.\r\n     * @param data Data used for MIDI Mixer to set up the assignment.\r\n     */\r\n    function Assignment(id, data) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var _this = _super.call(this) || this;\r\n        _this._name = \"\";\r\n        _this._volume = 1;\r\n        _this._meter = 0;\r\n        _this._muted = false;\r\n        _this._assigned = false;\r\n        _this._running = false;\r\n        _this._throttle = 50;\r\n        var trimmedName = ((_a = data === null || data === void 0 ? void 0 : data.name) !== null && _a !== void 0 ? _a : \"\").trim();\r\n        if (!id || !trimmedName) {\r\n            throw new Error(\"Must provide an ID and name to create an assignment.\");\r\n        }\r\n        _this.id = id;\r\n        _this.name = trimmedName;\r\n        _this.volume = (_b = data.volume) !== null && _b !== void 0 ? _b : 1;\r\n        _this.meter = 0;\r\n        _this.muted = Boolean((_c = data.muted) !== null && _c !== void 0 ? _c : false);\r\n        _this.assigned = Boolean((_d = data.assigned) !== null && _d !== void 0 ? _d : false);\r\n        _this.running = Boolean((_e = data.running) !== null && _e !== void 0 ? _e : false);\r\n        _this.throttle = (_f = data.throttle) !== null && _f !== void 0 ? _f : 50;\r\n        $MM.onVolume(_this.id, function (volume) {\r\n            _this.emit(\"volumeChanged\", volume);\r\n        });\r\n        $MM.onPress(_this.id, _1.Button.Mute, function () {\r\n            _this.emit(\"mutePressed\");\r\n        });\r\n        $MM.onPress(_this.id, _1.Button.Assign, function () {\r\n            _this.emit(\"assignPressed\");\r\n        });\r\n        $MM.onPress(_this.id, _1.Button.Run, function () {\r\n            _this.emit(\"runPressed\");\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Remove the assignment from MIDI Mixer.\r\n     */\r\n    Assignment.prototype.remove = function () {\r\n        $MM.removeAssignment(this.id);\r\n    };\r\n    Object.defineProperty(Assignment.prototype, \"name\", {\r\n        /**\r\n         * The name of the assignment within MIDI Mixer. Setting this value updates\r\n         * the entry.\r\n         */\r\n        get: function () {\r\n            return this._name;\r\n        },\r\n        set: function (name) {\r\n            var trimmed = name.trim();\r\n            if (!trimmed)\r\n                throw new Error(\"Can't set an assignment name to be blank.\");\r\n            if (this._name === trimmed)\r\n                return;\r\n            this._name = trimmed;\r\n            $MM.updateAssignment(this.id, {\r\n                name: this._name,\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"volume\", {\r\n        /**\r\n         * The current indicator level for volume. Setting this updates the entry's\r\n         * volume level indicator within MIDI Mixer.\r\n         */\r\n        get: function () {\r\n            return this._volume;\r\n        },\r\n        set: function (level) {\r\n            var clampedVolume = Math.min(1, Math.max(0, level));\r\n            if (this._volume === clampedVolume)\r\n                return;\r\n            this._volume = clampedVolume;\r\n            $MM.setIndicator(this.id, _1.Indicator.Volume, this._volume);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"meter\", {\r\n        /**\r\n         * The current indicator level for meters. Setting this updates the entry's\r\n         * meter level for the next 150ms before falling off or being updated again.\r\n         */\r\n        get: function () {\r\n            return this._meter;\r\n        },\r\n        set: function (level) {\r\n            var _this = this;\r\n            if (this._meterTimer) {\r\n                clearTimeout(this._meterTimer);\r\n                delete this._meterTimer;\r\n            }\r\n            var clampedLevel = Math.min(1, Math.max(0, level));\r\n            this._meter = clampedLevel;\r\n            $MM.setIndicator(this.id, _1.Indicator.Meter, this._meter);\r\n            this._meterTimer = setTimeout(function () {\r\n                _this._meter = 0;\r\n            }, 150);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"muted\", {\r\n        /**\r\n         * The current \"muted\" status indicator. Setting this updates the entry's\r\n         * \"muted\" status within MIDI Mixer.\r\n         */\r\n        get: function () {\r\n            return this._muted;\r\n        },\r\n        set: function (muted) {\r\n            var sanitisedMuted = Boolean(muted);\r\n            if (this._muted === sanitisedMuted)\r\n                return;\r\n            this._muted = sanitisedMuted;\r\n            $MM.setButtonIndicator(this.id, _1.Button.Mute, this._muted);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"assigned\", {\r\n        /**\r\n         * The current \"assigned\" status indicator. Setting this updates the entry's\r\n         * \"assigned\" status within MIDI Mixer.\r\n         */\r\n        get: function () {\r\n            return this._assigned;\r\n        },\r\n        set: function (assigned) {\r\n            var sanitisedAssigned = Boolean(assigned);\r\n            if (this._assigned === sanitisedAssigned)\r\n                return;\r\n            this._assigned = Boolean(assigned);\r\n            $MM.setButtonIndicator(this.id, _1.Button.Assign, this._assigned);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"running\", {\r\n        /**\r\n         * The current \"running\" status indicator. Setting this updates the entry's\r\n         * \"running\" status within MIDI Mixer.\r\n         */\r\n        get: function () {\r\n            return this._running;\r\n        },\r\n        set: function (running) {\r\n            var sanitisedRunning = Boolean(running);\r\n            if (this._running === sanitisedRunning)\r\n                return;\r\n            this._running = Boolean(running);\r\n            $MM.setButtonIndicator(this.id, _1.Button.Run, this._running);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Assignment.prototype, \"throttle\", {\r\n        /**\r\n         * The minimum amount of time in milliseconds between volume change updates\r\n         * from MIDI Mixer. Some faders are very granular, so throttling these updates\r\n         * is sensible to ensure the good performance of plugins.\r\n         *\r\n         * Accepted values are anything between 50 to 1000.\r\n         *\r\n         * Defaults to 50.\r\n         */\r\n        get: function () {\r\n            return this._throttle;\r\n        },\r\n        set: function (throttle) {\r\n            var clampedThrottle = Math.min(1000, Math.max(50, throttle));\r\n            if (this._throttle === clampedThrottle)\r\n                return;\r\n            this._throttle = clampedThrottle;\r\n            $MM.setThrottle(this.id, this._throttle);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Assignment;\r\n}(eventemitter3_1.default));\r\nexports.Assignment = Assignment;\r\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ButtonType = void 0;\r\n// public\r\nvar eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\r\n// local\r\nvar _1 = require(\".\");\r\n/**\r\n * A ButtonType represents a single option in the list of generic buttons in\r\n * the Buttons tab of the UI. You can listen for incoming \"pressed\" events\r\n * from the board as well as change the button's indicator.\r\n *\r\n * ```\r\n * const foo = new ButtonType(\"start-streaming\", {\r\n *   name: \"Start Streaming\",\r\n * });\r\n *\r\n * foo.active = true;\r\n *\r\n * foo.on(\"pressed\", () => {\r\n *   // ...\r\n * });\r\n * ```\r\n */\r\nvar ButtonType = /** @class */ (function (_super) {\r\n    __extends(ButtonType, _super);\r\n    /**\r\n     * @param data Data to used for MIDI Mixer to set up the button type.\r\n     */\r\n    function ButtonType(id, data) {\r\n        var _a;\r\n        var _this = _super.call(this) || this;\r\n        _this._name = \"\";\r\n        _this._active = false;\r\n        var trimmedName = ((_a = data === null || data === void 0 ? void 0 : data.name) !== null && _a !== void 0 ? _a : \"\").trim();\r\n        if (!id || !trimmedName) {\r\n            throw new Error(\"Must provide an ID and a name to create a button type.\");\r\n        }\r\n        _this.id = id;\r\n        _this.name = trimmedName;\r\n        _this.active = Boolean(data.active);\r\n        $MM.onPress(_this.id, _1.Button.Generic, function () {\r\n            _this.emit(\"pressed\");\r\n        });\r\n        return _this;\r\n    }\r\n    ButtonType.prototype.remove = function () {\r\n        $MM.removeAssignment(this.id);\r\n    };\r\n    Object.defineProperty(ButtonType.prototype, \"name\", {\r\n        get: function () {\r\n            return this._name;\r\n        },\r\n        set: function (name) {\r\n            var trimmed = name.trim();\r\n            if (!trimmed)\r\n                throw new Error(\"Can't set a button type name to be blank.\");\r\n            if (this._name === trimmed)\r\n                return;\r\n            this._name = trimmed;\r\n            $MM.updateButtonType(this.id, {\r\n                name: trimmed,\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ButtonType.prototype, \"active\", {\r\n        get: function () {\r\n            return this._active;\r\n        },\r\n        set: function (active) {\r\n            var sanitisedActive = Boolean(active);\r\n            if (this._active === sanitisedActive)\r\n                return;\r\n            this._active = sanitisedActive;\r\n            $MM.setButtonIndicator(this.id, _1.Button.Generic, this._active);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return ButtonType;\r\n}(eventemitter3_1.default));\r\nexports.ButtonType = ButtonType;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Button = exports.Indicator = void 0;\r\n__exportStar(require(\"./Assignment\"), exports);\r\n__exportStar(require(\"./ButtonType\"), exports);\r\nvar Indicator;\r\n(function (Indicator) {\r\n    Indicator[\"Volume\"] = \"volume\";\r\n    Indicator[\"Meter\"] = \"meter\";\r\n})(Indicator = exports.Indicator || (exports.Indicator = {}));\r\nvar Button;\r\n(function (Button) {\r\n    Button[\"Mute\"] = \"mute\";\r\n    Button[\"Assign\"] = \"assign\";\r\n    Button[\"Run\"] = \"run\";\r\n    Button[\"Generic\"] = \"generic\";\r\n})(Button = exports.Button || (exports.Button = {}));\r\n","// public\nimport { Assignment } from \"midi-mixer-plugin\";\n\ninterface Assignments {\n  groups: Record<string, AssignmentData>;\n  lights: Record<string, AssignmentData>;\n}\n\nenum ControlTarget {\n  Brightness = \"brightness\",\n  Hue = \"hue\",\n}\n\ninterface AssignmentData {\n  assignment: Assignment;\n  scenes?: string[];\n  currentScene?: number;\n  controlling: ControlTarget;\n  brightness?: number;\n  hue?: number;\n}\n\nexport class HueSyncApi {\n  private readonly assignments: Assignments = {\n    groups: {},\n    lights: {},\n  };\n  private syncingLights: Promise<void> | null = null;\n  private syncingGroups: Promise<void> | null = null;\n  private needResync = false;\n  private changeSyncTimer: ReturnType<typeof setInterval> | null = null;\n\n  private readonly settings = $MM.getSettings();\n\n  private readonly baseUrl = new Promise<string>((resolve, reject) => {\n    this.settings\n      .then((settings) => {\n        if (!settings?.hueip)\n          return reject(new Error(\"No Philips Hue IP given to connect to.\"));\n\n        if (!settings?.hueuser)\n          return reject(new Error(\"No Philips Hue user given to log in as.\"));\n\n        resolve(`http://${settings.hueip}/api/${settings.hueuser}`);\n      })\n      .catch(reject);\n  });\n\n  constructor() {\n    this.syncGroups();\n    this.syncLights();\n\n    this.settings.then((settings) => {\n      const attemptedInterval = Math.ceil(Number(settings.synctime || 30));\n\n      const interval =\n        isFinite(attemptedInterval) && attemptedInterval\n          ? attemptedInterval * 1000\n          : 30000;\n\n      console.log(\"Sync interval:\", interval / 1000, \"seconds\");\n\n      setInterval(() => this.syncGroups(), interval);\n      setInterval(() => this.syncLights(), interval);\n    });\n  }\n\n  public throttleSync(): void {\n    this.needResync = true;\n    if (!this.changeSyncTimer) {\n      this.changeSyncTimer = setInterval(async () => {\n        this.needResync = false;\n        await Promise.all([this.syncGroups(), this.syncLights()]);\n        /**\n         * Cancel the interval timer if needResync is still false. If another\n         * control has requested a resync then the interval can continue.\n         */\n        if (!this.needResync && this.changeSyncTimer) {\n          clearInterval(this.changeSyncTimer);\n          this.changeSyncTimer = null;\n        }\n      }, 200);\n    }\n  }\n\n  public async syncLights(): Promise<void> {\n    this.syncingLights ??= this._syncLights().then(() => {\n      this.syncingLights = null;\n    });\n\n    return this.syncingLights;\n  }\n\n  public syncGroups(): Promise<void> {\n    this.syncingGroups ??= this._syncGroups().then(() => {\n      this.syncingGroups = null;\n    });\n\n    return this.syncingGroups;\n  }\n\n  private async _syncLights(): Promise<void> {\n    console.log(\"Syncing lights\");\n\n    const baseUrl = await this.baseUrl;\n\n    const lightsRes: Hue.Lights = await fetch(`${baseUrl}/lights`).then((res) =>\n      res.json()\n    );\n\n    Object.entries(lightsRes).forEach(([id, light]) => {\n      if (!this.assignments.lights[id]) {\n        const assignment = new Assignment(`light-${id}`, {\n          name: `${light.name} (light)`,\n          assigned: false,\n          muted: light.state.on,\n          volume: light.state.bri / 254,\n          throttle: 100,\n        });\n\n        assignment.on(\"volumeChanged\", (volume: number) => {\n          assignment.volume = volume;\n\n          const change: any = {\n            transitiontime: 1,\n          };\n\n          if (this.assignments.lights[id].controlling === ControlTarget.Hue) {\n            change.hue = Math.round(assignment.volume * 65535);\n            change.sat = 254;\n          } else {\n            change.bri = Math.round(assignment.volume * 254);\n          }\n\n          fetch(`${baseUrl}/lights/${id}/state`, {\n            method: \"PUT\",\n            body: JSON.stringify(change),\n          }).then((res) => {\n            if (res.ok) {\n              this.throttleSync();\n            }\n          });\n        });\n\n        assignment.on(\"runPressed\", () => {\n          if (!this.assignments.lights[id]) return;\n\n          if (\n            this.assignments.lights[id].controlling === ControlTarget.Brightness\n          ) {\n            assignment.running = true;\n            this.assignments.lights[id].controlling = ControlTarget.Hue;\n            assignment.volume = (this.assignments.lights[id].hue ?? 0) / 65535;\n          } else {\n            assignment.running = false;\n            this.assignments.lights[id].controlling = ControlTarget.Brightness;\n            assignment.volume =\n              (this.assignments.lights[id].brightness ?? 0) / 254;\n          }\n        });\n\n        assignment.on(\"mutePressed\", () => {\n          assignment.muted = !assignment.muted;\n\n          fetch(`${baseUrl}/lights/${id}/state`, {\n            method: \"PUT\",\n            body: JSON.stringify({\n              bri: Math.round(this.assignments.lights[id].brightness ?? 254),\n              on: assignment.muted,\n              transitiontime: 1,\n            }),\n          }).then((res) => {\n            if (res.ok) {\n              this.throttleSync();\n            }\n          });\n        });\n\n        this.assignments.lights[id] = {\n          assignment,\n          controlling: ControlTarget.Brightness,\n          brightness: light.state.bri,\n          hue: light.state.hue,\n        };\n      } else {\n        this.assignments.lights[id].brightness = light.state.bri;\n        this.assignments.lights[id].hue = light.state.hue;\n\n        const assignment = this.assignments.lights[id].assignment;\n        assignment.name = `${light.name} (light)`;\n        assignment.muted = light.state.on;\n        assignment.running =\n          this.assignments.lights[id].controlling === ControlTarget.Hue;\n        assignment.volume =\n          this.assignments.lights[id].controlling === ControlTarget.Hue\n            ? light.state.hue / 65535\n            : light.state.bri / 254;\n      }\n    });\n  }\n\n  private async _syncGroups(): Promise<void> {\n    console.log(\"Syncing groups\");\n\n    // const api = await this.api;\n    const baseUrl = await this.baseUrl;\n\n    const [groupsRes, scenesRes]: [Hue.Groups, Hue.Scenes] = await Promise.all([\n      fetch(`${baseUrl}/groups`).then((res) => res.json()),\n      fetch(`${baseUrl}/scenes`).then((res) => res.json()),\n    ]);\n\n    Object.entries(groupsRes).forEach(([id, group]) => {\n      if (!this.assignments.groups[id]) {\n        const assignment = new Assignment(`group-${id}`, {\n          name: `${group.name} (room)`,\n          muted: group.action.on,\n          volume: group.action.bri / 254,\n          throttle: 1000,\n          assigned: true,\n        });\n\n        assignment.on(\"volumeChanged\", (volume: number) => {\n          assignment.volume = volume;\n\n          const change: any = {\n            transitiontime: 10,\n          };\n\n          if (this.assignments.groups[id].controlling === ControlTarget.Hue) {\n            change.hue = Math.round(assignment.volume * 65535);\n            change.sat = 254;\n          } else {\n            change.bri = Math.round(assignment.volume * 254);\n          }\n\n          fetch(`${baseUrl}/groups/${id}/action`, {\n            method: \"PUT\",\n            body: JSON.stringify(change),\n          }).then((res) => {\n            if (res.ok) {\n              this.throttleSync();\n            }\n          });\n        });\n\n        assignment.on(\"runPressed\", () => {\n          if (!this.assignments.groups[id]) return;\n\n          if (\n            this.assignments.groups[id].controlling === ControlTarget.Brightness\n          ) {\n            assignment.running = true;\n            this.assignments.groups[id].controlling = ControlTarget.Hue;\n            assignment.volume = (this.assignments.groups[id].hue ?? 0) / 65535;\n          } else {\n            assignment.running = false;\n            this.assignments.groups[id].controlling = ControlTarget.Brightness;\n            assignment.volume =\n              (this.assignments.groups[id].brightness ?? 0) / 254;\n          }\n        });\n\n        assignment.on(\"mutePressed\", () => {\n          assignment.muted = !assignment.muted;\n\n          fetch(`${baseUrl}/groups/${id}/action`, {\n            method: \"PUT\",\n            body: JSON.stringify({\n              bri: Math.round(this.assignments.groups[id].brightness ?? 254),\n              on: assignment.muted,\n              transitiontime: 1,\n            }),\n          }).then((res) => {\n            if (res.ok) {\n              this.throttleSync();\n            }\n          });\n        });\n\n        assignment.on(\"assignPressed\", () => {\n          const data = this.assignments.groups[id];\n          if (!data) return;\n\n          data.currentScene =\n            ((data.currentScene ?? -1) + 1) % (data.scenes?.length ?? 0);\n          const sceneId = data.scenes?.[data.currentScene];\n          if (!sceneId) return;\n\n          fetch(`${baseUrl}/groups/${id}/action`, {\n            method: \"PUT\",\n            body: JSON.stringify({\n              on: true,\n              scene: sceneId,\n              transitiontime: 1,\n              effect: sceneId === \"colorloop\" ? \"colorloop\" : \"none\",\n            }),\n          }).then((res) => {\n            if (res.ok) {\n              this.throttleSync();\n            }\n          });\n        });\n\n        this.assignments.groups[id] = {\n          assignment,\n          scenes: [\"colorloop\"],\n          controlling: ControlTarget.Brightness,\n        };\n      } else {\n        this.assignments.groups[id].brightness = group.action.bri ?? 254;\n        this.assignments.groups[id].hue = group.action.hue ?? 0;\n\n        const { assignment } = this.assignments.groups[id];\n        assignment.name = `${group.name} (room)`;\n        assignment.muted = group.action.on;\n        assignment.volume =\n          this.assignments.groups[id].controlling === ControlTarget.Hue\n            ? group.action.hue / 65535\n            : group.action.bri / 254;\n        assignment.running =\n          this.assignments.groups[id].controlling === ControlTarget.Hue;\n        this.assignments.groups[id].scenes = [\"colorloop\"];\n      }\n    });\n\n    Object.entries(scenesRes).forEach(([id, scene]) => {\n      const assignment = this.assignments.groups[scene.group];\n      if (!assignment) return;\n      assignment.scenes?.push(id);\n    });\n  }\n}\n","// local\nimport { HueSyncApi } from \"./api\";\n\nnew HueSyncApi();\n"]}